#cloud-config
# Cloud-init configuration for Elegant-Tex application server

# Update system packages
package_update: true
package_upgrade: true

# Install required packages
packages:
  - docker.io
  - docker-compose
  - git
  - curl
  - wget
  - unzip
  - htop
  - nginx
  - certbot
  - python3-certbot-nginx
  - fail2ban
  - ufw

# Configure Docker
runcmd:
  # Start and enable Docker
  - systemctl start docker
  - systemctl enable docker
  - usermod -aG docker root
  
  # Configure firewall (UFW)
  - ufw --force enable
  - ufw allow ssh
  - ufw allow http
  - ufw allow https
  
  # Configure fail2ban for SSH protection
  - systemctl start fail2ban
  - systemctl enable fail2ban
  
  # Create application directory
  - mkdir -p /srv/${project_name}
  - cd /srv/${project_name}
  
  # Set up log rotation
  - mkdir -p /var/log/${project_name}
  - chown -R root:root /var/log/${project_name}
  
  # Configure Docker daemon for optimization
  - |
    cat > /etc/docker/daemon.json << EOF
    {
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "10m",
        "max-file": "3"
      },
      "storage-driver": "overlay2"
    }
    EOF
  - systemctl restart docker
  
  # Create systemd service for application
  - |
    cat > /etc/systemd/system/${project_name}.service << EOF
    [Unit]
    Description=${project_name} Application
    Requires=docker.service
    After=docker.service
    
    [Service]
    Type=oneshot
    RemainAfterExit=yes
    WorkingDirectory=/srv/${project_name}
    ExecStart=/usr/bin/docker-compose up -d
    ExecStop=/usr/bin/docker-compose down
    TimeoutStartSec=0
    
    [Install]
    WantedBy=multi-user.target
    EOF
  
  # Enable the service
  - systemctl daemon-reload
  - systemctl enable ${project_name}.service
  
  # Set up basic monitoring script
  - |
    cat > /usr/local/bin/health-check.sh << 'EOF'
    #!/bin/bash
    # Basic health check script
    
    # Check if Docker is running
    if ! systemctl is-active --quiet docker; then
        echo "$(date): Docker is not running" >> /var/log/${project_name}/health.log
        systemctl start docker
    fi
    
    # Check if application containers are running
    cd /srv/${project_name}
    if [ -f docker-compose.yml ]; then
        if ! docker-compose ps | grep -q "Up"; then
            echo "$(date): Application containers not running" >> /var/log/${project_name}/health.log
            docker-compose up -d
        fi
    fi
    
    # Check disk space
    DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
    if [ $DISK_USAGE -gt 80 ]; then
        echo "$(date): Disk usage is $${DISK_USAGE}%" >> /var/log/${project_name}/health.log
        docker image prune -f
    fi
    EOF
  
  - chmod +x /usr/local/bin/health-check.sh
  
  # Set up cron job for health checks
  - echo "*/5 * * * * root /usr/local/bin/health-check.sh" >> /etc/crontab
  
  # Set up log rotation for application logs
  - |
    cat > /etc/logrotate.d/${project_name} << EOF
    /var/log/${project_name}/*.log {
        daily
        missingok
        rotate 30
        compress
        delaycompress
        notifempty
        create 644 root root
    }
    EOF

# Configure timezone
timezone: Asia/Singapore

# Set up users (optional - for additional security)
users:
  - name: deploy
    groups: docker
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']

# Write additional configuration files
write_files:
  - path: /etc/fail2ban/jail.local
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 3
      
      [sshd]
      enabled = true
      port = ssh
      filter = sshd
      logpath = /var/log/auth.log
      maxretry = 3
      bantime = 3600
    permissions: '0644'
  
  - path: /srv/${project_name}/README.md
    content: |
      # ${project_name} - ${environment} Environment
      
      This server is managed by Terraform.
      
      ## Quick Commands
      - Check application status: `docker-compose ps`
      - View logs: `docker-compose logs -f`
      - Restart application: `docker-compose restart`
      - Update application: `git pull && docker-compose pull && docker-compose up -d`
      
      ## Health Check
      - Manual health check: `/usr/local/bin/health-check.sh`
      - Health logs: `tail -f /var/log/${project_name}/health.log`
      
      ## Monitoring
      - System resources: `htop`
      - Docker stats: `docker stats`
      - Disk usage: `df -h`
    permissions: '0644'

# Final message
final_message: |
  Cloud-init setup completed for ${project_name} ${environment} environment.
  Server is ready for application deployment.
  
  Next steps:
  1. Clone your application repository to /srv/${project_name}
  2. Configure your docker-compose.yml file
  3. Start the application with: systemctl start ${project_name}
