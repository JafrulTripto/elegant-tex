name: Terraform Plan

on:
  pull_request:
    branches:
      - master
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  TF_VERSION: '1.6.0'
  TF_WORKING_DIR: './terraform'

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: terraform-plan

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        if: github.event.pull_request.head.repo.full_name == github.repository
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        if: github.event.pull_request.head.repo.full_name == github.repository
        run: terraform init
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Terraform Validate
        id: validate
        if: github.event.pull_request.head.repo.full_name == github.repository
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event.pull_request.head.repo.full_name == github.repository
        run: |
          terraform plan -no-color -out=tfplan \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}" \
            -var="alert_email=${{ secrets.ALERT_EMAIL }}"
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        continue-on-error: true

      - name: Generate Plan Summary
        id: summary
        run: |
          if [ -f tfplan ]; then
            terraform show -no-color tfplan > plan.txt
          else
            echo "No plan generated (likely forked PR without secrets)" > plan.txt
          fi
          echo "PLAN_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          head -50 plan.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Cost Estimation
        id: cost
        run: |
          echo "💰 **Estimated Monthly Cost Changes:**" > cost.txt
          echo "- DigitalOcean Droplet (s-1vcpu-2gb): ~$12/month" >> cost.txt
          echo "- AWS S3 + CloudFront: ~$2/month" >> cost.txt
          echo "- AWS DynamoDB (On-Demand): ~$0.10-0.50/month" >> cost.txt
          echo "- Cloudflare DNS: Free" >> cost.txt
          echo "- **Total Estimated**: ~$14-15/month" >> cost.txt
          echo "" >> cost.txt
          echo "💡 **Cost Optimization Features Enabled:**" >> cost.txt
          echo "- S3 Intelligent-Tiering" >> cost.txt
          echo "- CloudFront PriceClass_100 (US/EU only)" >> cost.txt
          echo "- DynamoDB On-Demand pricing" >> cost.txt
          echo "- Automated resource cleanup" >> cost.txt

      - name: Comment PR with Plan
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan.txt', 'utf8');
            const cost = fs.readFileSync('terraform/cost.txt', 'utf8');
            const fmtResult = '${{ steps.fmt.outcome }}' === 'success' ? '✅' : '❌';
            const initResult = '${{ steps.init.outcome }}' === 'success' ? '✅' : '❌';
            const validateResult = '${{ steps.validate.outcome }}' === 'success' ? '✅' : '❌';
            const planResult = '${{ steps.plan.outcome }}' === 'success' ? '✅' : '❌';
            
            const output = `#### Terraform Plan Results 📋
            
            | Check | Result |
            |-------|--------|
            | 🎨 Format | ${fmtResult} |
            | 🔧 Init | ${initResult} |
            | ✅ Validate | ${validateResult} |
            | 📋 Plan | ${planResult} |
            
            ${cost}
            
            <details><summary>📋 Show Terraform Plan</summary>
            
            \`\`\`hcl
            ${plan.slice(0, 8000)}
            \`\`\`
            
            </details>
            
            ---
            
            **Next Steps:**
            ${planResult === '✅' ? 
              '✅ Plan looks good! Merge this PR to apply changes.' : 
              '❌ Plan failed. Please review the errors above.'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Plan Status
        if: steps.plan.outcome == 'failure' && github.event.pull_request.head.repo.full_name == github.repository
        run: exit 1
