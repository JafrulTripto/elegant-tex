name: Terraform Apply

on:
  push:
    branches:
      - master
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'

env:
  TF_VERSION: '1.6.0'
  TF_WORKING_DIR: './terraform'

permissions:
  contents: read

jobs:
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}" \
            -var="alert_email=${{ secrets.ALERT_EMAIL }}"
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Get Terraform Outputs
        id: outputs
        run: |
          echo "DROPLET_IP=$(terraform output -raw droplet_ip)" >> $GITHUB_OUTPUT
          echo "CLOUDFRONT_URL=$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_OUTPUT
          echo "FRONTEND_BUCKET=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
          echo "STORAGE_BUCKET=$(terraform output -raw storage_bucket_name)" >> $GITHUB_OUTPUT

      - name: Display Results
        run: |
          echo "âœ… Infrastructure deployment successful!"
          echo "Droplet IP: ${{ steps.outputs.outputs.DROPLET_IP }}"
          echo "CloudFront URL: https://${{ steps.outputs.outputs.CLOUDFRONT_URL }}"
          echo "Frontend Bucket: ${{ steps.outputs.outputs.FRONTEND_BUCKET }}"
          echo "Storage Bucket: ${{ steps.outputs.outputs.STORAGE_BUCKET }}"

      - name: Save Terraform State Info
        run: |
          echo "Terraform state saved to S3: elegant-tex-terraform-state/prod/terraform.tfstate"
          echo "State lock table: elegant-tex-terraform-locks"
          echo "Apply completed at: $(date)"