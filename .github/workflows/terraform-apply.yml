name: Terraform Apply

on:
  push:
    branches:
      - master
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'

env:
  TF_VERSION: '1.6.0'
  TF_WORKING_DIR: './terraform'

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: write
  # Note: GITHUB_TOKEN still cannot create commit comments or update secrets
  # You'll need a PAT (Personal Access Token) for those operations

jobs:
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}" \
            -var="alert_email=${{ secrets.ALERT_EMAIL }}"
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Get Terraform Outputs
        id: outputs
        run: |
          echo "DROPLET_IP=$(terraform output -raw droplet_ip)" >> $GITHUB_OUTPUT
          echo "CLOUDFRONT_URL=$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_OUTPUT
          echo "FRONTEND_BUCKET=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
          echo "STORAGE_BUCKET=$(terraform output -raw storage_bucket_name)" >> $GITHUB_OUTPUT
        continue-on-error: true

      # This step will likely fail with GITHUB_TOKEN - consider using a PAT
      - name: Update GitHub Secrets
        uses: actions/github-script@v7
        continue-on-error: true  # Don't fail the workflow if this fails
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}  # Use PAT if available
          script: |
            const dropletIp = '${{ steps.outputs.outputs.DROPLET_IP }}';
            if (dropletIp && dropletIp !== '') {
              try {
                await github.rest.actions.createOrUpdateRepoSecret({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  secret_name: 'DIGITAL_OCEAN_IP',
                  encrypted_value: dropletIp
                });
                console.log('‚úÖ Updated DIGITAL_OCEAN_IP secret');
              } catch (error) {
                console.log('‚ö†Ô∏è Could not update DIGITAL_OCEAN_IP secret:', error.message);
                core.warning(`Failed to update secret: ${error.message}`);
              }
            }

      - name: Create Infrastructure Summary
        run: |
          cat > ../infrastructure-summary.md << 'EOF'
          # üöÄ Infrastructure Deployment Summary
          
          ## ‚úÖ Successfully Deployed Resources
          
          ### üñ•Ô∏è DigitalOcean
          - **Droplet IP**: `${{ steps.outputs.outputs.DROPLET_IP }}`
          - **Region**: Singapore (sgp1)
          - **Size**: 1vCPU, 2GB RAM
          - **Features**: Monitoring, Backups, Firewall
          
          ### ‚òÅÔ∏è AWS
          - **Frontend Bucket**: `${{ steps.outputs.outputs.FRONTEND_BUCKET }}`
          - **Storage Bucket**: `${{ steps.outputs.outputs.STORAGE_BUCKET }}`
          - **CloudFront URL**: `https://${{ steps.outputs.outputs.CLOUDFRONT_URL }}`
          - **Features**: S3 Intelligent-Tiering, Lifecycle Policies
          
          ### üîí Cloudflare
          - **DNS Management**: Active
          - **Security Rules**: Enabled
          - **SSL/TLS**: Full (Strict)
          - **Performance**: Optimized
          
          ## üîó Access URLs
          - **API**: https://elegant-tex.com
          - **Frontend**: https://web.elegant-tex.com
          - **Admin**: https://elegant-tex.com/admin
          
          ## üí∞ Cost Optimization
          - S3 Intelligent-Tiering: ‚úÖ Enabled
          - CloudFront Price Class: PriceClass_100 (US/EU)
          - DynamoDB On-Demand: ‚úÖ Enabled
          - Automated Cleanup: ‚úÖ Enabled
          - **Estimated Monthly Cost**: $14-15
          
          ## üîß Next Steps
          1. Your existing deployment workflows will continue to work
          2. SSH to server: `ssh root@${{ steps.outputs.outputs.DROPLET_IP }}`
          3. Deploy your application using existing GitHub Actions
          4. Monitor costs in AWS/DigitalOcean dashboards
          
          ## üìä Monitoring
          - DigitalOcean: Monitoring enabled
          - AWS CloudWatch: Alarms configured
          - Cloudflare: Analytics available
          
          ---
          *Infrastructure managed by Terraform*
          EOF

      # Alternative: Create a PR comment instead of commit comment
      - name: Create PR Comment (if PR exists)
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('infrastructure-summary.md', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      # Alternative: Create an issue with the summary
      - name: Create Infrastructure Issue
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('infrastructure-summary.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Infrastructure Deployment - ${new Date().toISOString().split('T')[0]}`,
              body: summary,
              labels: ['infrastructure', 'terraform']
            });

      # Fallback: Just output to workflow summary
      - name: Add to Workflow Summary
        run: |
          echo "## Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          cat infrastructure-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Slack Notification (Optional)
        if: always()
        run: |
          if [ "${{ steps.apply.outcome }}" == "success" ]; then
            echo "‚úÖ Infrastructure deployment successful!"
            echo "Droplet IP: ${{ steps.outputs.outputs.DROPLET_IP }}"
            echo "CloudFront URL: https://${{ steps.outputs.outputs.CLOUDFRONT_URL }}"
          else
            echo "‚ùå Infrastructure deployment failed!"
          fi

      - name: Save Terraform State Info
        run: |
          echo "Terraform state saved to S3: elegant-tex-terraform-state/prod/terraform.tfstate"
          echo "State lock table: elegant-tex-terraform-locks"
          echo "Apply completed at: $(date)"